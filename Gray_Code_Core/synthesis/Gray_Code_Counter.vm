//
// Written by Synplify Pro 
// Product Version "P-2019.03M-SP1-1"
// Program "Synplify Pro", Mapper "mapact, Build 2737R"
// Wed Apr 29 22:32:33 2020
//
// Source file index table:
// Object locations will have the form <file>:<line>
// file 0 "\c:\microsemi\libero_soc_v12.4\synplifypro\lib\vhd2008\std.vhd "
// file 1 "\c:\microsemi\libero_soc_v12.4\synplifypro\lib\vhd\snps_haps_pkg.vhd "
// file 2 "\c:\microsemi\libero_soc_v12.4\synplifypro\lib\vhd2008\std1164.vhd "
// file 3 "\c:\microsemi\libero_soc_v12.4\synplifypro\lib\vhd2008\std_textio.vhd "
// file 4 "\c:\microsemi\libero_soc_v12.4\synplifypro\lib\vhd2008\numeric.vhd "
// file 5 "\c:\microsemi\libero_soc_v12.4\synplifypro\lib\vhd\umr_capim.vhd "
// file 6 "\c:\microsemi\libero_soc_v12.4\synplifypro\lib\vhd2008\arith.vhd "
// file 7 "\c:\microsemi\libero_soc_v12.4\synplifypro\lib\vhd2008\unsigned.vhd "
// file 8 "\c:\microsemi\libero_soc_v12.4\synplifypro\lib\vhd\hyperents.vhd "
// file 9 "\e:\github_repos\gray_code_core\gray_code_core\hdl\gray_code_package.vhd "
// file 10 "\e:\github_repos\gray_code_core\gray_code_core\hdl\gray_code_counter.vhd "
// file 11 "\c:\microsemi\libero_soc_v12.4\synplifypro\lib\nlconst.dat "
// file 12 "\e:\github_repos\gray_code_core\gray_code_core\designer\gray_code_counter\synthesis.fdc "

`timescale 100 ps/100 ps
module Gray_Code_Counter (
  CLK,
  RSTn,
  incr_cntr,
  gray_out
)
;

/*  Synopsys
.origName=Gray_Code_Counter
.langParams="g_n_bits"
g_n_bits=8
 */
input CLK ;
input RSTn ;
input incr_cntr ;
output [7:0] gray_out ;
wire CLK ;
wire RSTn ;
wire incr_cntr ;
wire [6:0] bin_cntr_Z;
wire [6:0] bin_cntr_cry_Z;
wire [6:0] bin_cntr_s;
wire [7:7] bin_cntr_s_Z;
wire [6:0] bin_cntr_cry_Y;
wire [7:7] bin_cntr_s_FCO;
wire [7:7] bin_cntr_s_Y;
wire [0:0] bin_cntr_cry_cy_S;
wire [0:0] bin_cntr_cry_cy_Y;
wire NN_1 ;
wire incr_sig_Z ;
wire GND ;
wire VCC ;
wire bin_cntr_cry_cy ;
  CLKINT CLK_RNIQO92 (
	.Y(NN_1),
	.A(CLK)
);
// @10:47
  SLE incr_sig (
	.Q(incr_sig_Z),
	.ADn(VCC),
	.ALn(RSTn),
	.CLK(NN_1),
	.D(incr_cntr),
	.EN(VCC),
	.LAT(GND),
	.SD(GND),
	.SLn(VCC)
);
// @10:47
  SLE \bin_cntr[0]  (
	.Q(bin_cntr_Z[0]),
	.ADn(VCC),
	.ALn(RSTn),
	.CLK(NN_1),
	.D(bin_cntr_s[0]),
	.EN(incr_cntr),
	.LAT(GND),
	.SD(GND),
	.SLn(VCC)
);
// @10:47
  SLE \bin_cntr[1]  (
	.Q(bin_cntr_Z[1]),
	.ADn(VCC),
	.ALn(RSTn),
	.CLK(NN_1),
	.D(bin_cntr_s[1]),
	.EN(incr_cntr),
	.LAT(GND),
	.SD(GND),
	.SLn(VCC)
);
// @10:47
  SLE \bin_cntr[2]  (
	.Q(bin_cntr_Z[2]),
	.ADn(VCC),
	.ALn(RSTn),
	.CLK(NN_1),
	.D(bin_cntr_s[2]),
	.EN(incr_cntr),
	.LAT(GND),
	.SD(GND),
	.SLn(VCC)
);
// @10:47
  SLE \bin_cntr[3]  (
	.Q(bin_cntr_Z[3]),
	.ADn(VCC),
	.ALn(RSTn),
	.CLK(NN_1),
	.D(bin_cntr_s[3]),
	.EN(incr_cntr),
	.LAT(GND),
	.SD(GND),
	.SLn(VCC)
);
// @10:47
  SLE \bin_cntr[4]  (
	.Q(bin_cntr_Z[4]),
	.ADn(VCC),
	.ALn(RSTn),
	.CLK(NN_1),
	.D(bin_cntr_s[4]),
	.EN(incr_cntr),
	.LAT(GND),
	.SD(GND),
	.SLn(VCC)
);
// @10:47
  SLE \bin_cntr[5]  (
	.Q(bin_cntr_Z[5]),
	.ADn(VCC),
	.ALn(RSTn),
	.CLK(NN_1),
	.D(bin_cntr_s[5]),
	.EN(incr_cntr),
	.LAT(GND),
	.SD(GND),
	.SLn(VCC)
);
// @10:47
  SLE \bin_cntr[6]  (
	.Q(bin_cntr_Z[6]),
	.ADn(VCC),
	.ALn(RSTn),
	.CLK(NN_1),
	.D(bin_cntr_s[6]),
	.EN(incr_cntr),
	.LAT(GND),
	.SD(GND),
	.SLn(VCC)
);
// @10:47
  SLE \bin_cntr[7]  (
	.Q(gray_out[7]),
	.ADn(VCC),
	.ALn(RSTn),
	.CLK(NN_1),
	.D(bin_cntr_s_Z[7]),
	.EN(incr_cntr),
	.LAT(GND),
	.SD(GND),
	.SLn(VCC)
);
// @10:47
  ARI1 \bin_cntr_cry_cy[0]  (
	.FCO(bin_cntr_cry_cy),
	.S(bin_cntr_cry_cy_S[0]),
	.Y(bin_cntr_cry_cy_Y[0]),
	.B(incr_sig_Z),
	.C(GND),
	.D(GND),
	.A(VCC),
	.FCI(VCC)
);
defparam \bin_cntr_cry_cy[0] .INIT=20'h45500;
// @10:47
  ARI1 \bin_cntr_cry[0]  (
	.FCO(bin_cntr_cry_Z[0]),
	.S(bin_cntr_s[0]),
	.Y(bin_cntr_cry_Y[0]),
	.B(bin_cntr_Z[0]),
	.C(GND),
	.D(GND),
	.A(VCC),
	.FCI(bin_cntr_cry_cy)
);
defparam \bin_cntr_cry[0] .INIT=20'h4AA00;
// @10:47
  ARI1 \bin_cntr_cry[1]  (
	.FCO(bin_cntr_cry_Z[1]),
	.S(bin_cntr_s[1]),
	.Y(bin_cntr_cry_Y[1]),
	.B(bin_cntr_Z[1]),
	.C(GND),
	.D(GND),
	.A(VCC),
	.FCI(bin_cntr_cry_Z[0])
);
defparam \bin_cntr_cry[1] .INIT=20'h4AA00;
// @10:47
  ARI1 \bin_cntr_cry[2]  (
	.FCO(bin_cntr_cry_Z[2]),
	.S(bin_cntr_s[2]),
	.Y(bin_cntr_cry_Y[2]),
	.B(bin_cntr_Z[2]),
	.C(GND),
	.D(GND),
	.A(VCC),
	.FCI(bin_cntr_cry_Z[1])
);
defparam \bin_cntr_cry[2] .INIT=20'h4AA00;
// @10:47
  ARI1 \bin_cntr_cry[3]  (
	.FCO(bin_cntr_cry_Z[3]),
	.S(bin_cntr_s[3]),
	.Y(bin_cntr_cry_Y[3]),
	.B(bin_cntr_Z[3]),
	.C(GND),
	.D(GND),
	.A(VCC),
	.FCI(bin_cntr_cry_Z[2])
);
defparam \bin_cntr_cry[3] .INIT=20'h4AA00;
// @10:47
  ARI1 \bin_cntr_cry[4]  (
	.FCO(bin_cntr_cry_Z[4]),
	.S(bin_cntr_s[4]),
	.Y(bin_cntr_cry_Y[4]),
	.B(bin_cntr_Z[4]),
	.C(GND),
	.D(GND),
	.A(VCC),
	.FCI(bin_cntr_cry_Z[3])
);
defparam \bin_cntr_cry[4] .INIT=20'h4AA00;
// @10:47
  ARI1 \bin_cntr_cry[5]  (
	.FCO(bin_cntr_cry_Z[5]),
	.S(bin_cntr_s[5]),
	.Y(bin_cntr_cry_Y[5]),
	.B(bin_cntr_Z[5]),
	.C(GND),
	.D(GND),
	.A(VCC),
	.FCI(bin_cntr_cry_Z[4])
);
defparam \bin_cntr_cry[5] .INIT=20'h4AA00;
// @10:47
  ARI1 \bin_cntr_s[7]  (
	.FCO(bin_cntr_s_FCO[7]),
	.S(bin_cntr_s_Z[7]),
	.Y(bin_cntr_s_Y[7]),
	.B(gray_out[7]),
	.C(GND),
	.D(GND),
	.A(VCC),
	.FCI(bin_cntr_cry_Z[6])
);
defparam \bin_cntr_s[7] .INIT=20'h4AA00;
// @10:47
  ARI1 \bin_cntr_cry[6]  (
	.FCO(bin_cntr_cry_Z[6]),
	.S(bin_cntr_s[6]),
	.Y(bin_cntr_cry_Y[6]),
	.B(bin_cntr_Z[6]),
	.C(GND),
	.D(GND),
	.A(VCC),
	.FCI(bin_cntr_cry_Z[5])
);
defparam \bin_cntr_cry[6] .INIT=20'h4AA00;
// @9:39
  CFG2 \gray_code[0]  (
	.A(bin_cntr_Z[0]),
	.B(bin_cntr_Z[1]),
	.Y(gray_out[0])
);
defparam \gray_code[0] .INIT=4'h6;
// @9:39
  CFG2 \gray_code[1]  (
	.A(bin_cntr_Z[1]),
	.B(bin_cntr_Z[2]),
	.Y(gray_out[1])
);
defparam \gray_code[1] .INIT=4'h6;
// @9:39
  CFG2 \gray_code[2]  (
	.A(bin_cntr_Z[2]),
	.B(bin_cntr_Z[3]),
	.Y(gray_out[2])
);
defparam \gray_code[2] .INIT=4'h6;
// @9:39
  CFG2 \gray_code[3]  (
	.A(bin_cntr_Z[3]),
	.B(bin_cntr_Z[4]),
	.Y(gray_out[3])
);
defparam \gray_code[3] .INIT=4'h6;
// @9:39
  CFG2 \gray_code[4]  (
	.A(bin_cntr_Z[4]),
	.B(bin_cntr_Z[5]),
	.Y(gray_out[4])
);
defparam \gray_code[4] .INIT=4'h6;
// @9:39
  CFG2 \gray_code[5]  (
	.A(bin_cntr_Z[5]),
	.B(bin_cntr_Z[6]),
	.Y(gray_out[5])
);
defparam \gray_code[5] .INIT=4'h6;
// @9:39
  CFG2 \gray_code[6]  (
	.A(bin_cntr_Z[6]),
	.B(gray_out[7]),
	.Y(gray_out[6])
);
defparam \gray_code[6] .INIT=4'h6;
  GND GND_Z (
	.Y(GND)
);
  VCC VCC_Z (
	.Y(VCC)
);
endmodule /* Gray_Code_Counter */

